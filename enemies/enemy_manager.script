local enemyClass = require("enemies.enemy")
--Setting up enemy types

local function add_type(speed,health,damage,name)
	enemyClass:addType({speed = speed,health = health,damage = damage,name = name})
end
add_type(3.5, 45, 30, "Regular") --1: normal
add_type(5, 40, 26, "Fast") --2: slightly faster
add_type(3, 50, 35, "Damage") --3: bigger guns

----

--Enemy class--

--end enemy class--

function SpawnEnemy(type)
	local newEnemy = enemyClass:new(nil,type)
	enemyClass.enemies[newEnemy:get_id()] = newEnemy
end

function init(self)
	msg.post(".","acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection")
	local function call_every_second(self, handle, time_elapsed)
		self.counter = self.counter + 1
		SpawnEnemy(math.random(3))
		--print(enemies[newEnemy:get_id()])
		if self.counter == 50000 then
		  timer.cancel(handle) -- cancel timer after 10 calls
		end
	  end
	self.counter = 0
	--SpawnEnemy(1)
	timer.delay(1, true, call_every_second)
end

function on_message(self, message_id, message, sender) --this solution is stupid, change it
	if message_id == hash("start_callback") then 
		--print(message.id)
		local enemy = enemyClass.enemies[message.id]
		--print("starting at "..message.pos)
		enemy:start(message.pos,message.next)
	elseif message_id == hash("next_callback") then
		local enemy = enemyClass.enemies[message.id]
		--print(message.id)
		--print("going to next at "..message.pos)
		enemy:move(message.pos,message.tile)
		--move_char(self,message.pos,message.tile)
	elseif message_id == hash("take_damage") then
		local enemy = enemyClass.enemies[message.id]
		enemy:take_damage(message.damage)
	end
end

function on_input(self,action_id,action)
	if action_id == hash("click") and action.pressed then
		for _,v in pairs(enemyClass.enemies) do
			if v == nil then return end
			local position = v:get_position()
			local dist = vmath.length(vmath.vector3(action.x,action.y,0)-position)
			if dist < 20 then
				v:final()
			end
		end
	elseif action_id == hash("killall") then
		for _,v in pairs(enemyClass.enemies) do
			if v == nil then return end
			v:take_damage(70)
		end
	end
end