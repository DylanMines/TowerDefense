local hexagon_geometry = require("hexagon.resources.hex_geometry")

local TILE_SIZE_DEFAULT = 74

function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

local function for_each_tile(map, tile_operation)
	for _, value in ipairs(map) do
		tile_operation(value[1],value[2])
	end
end

local function build_grid(size,map)
	size = TILE_SIZE_DEFAULT --temporary fix for the sprite scaling
	--[[
	* create new collection
	* create a table to keep track of tiles
	* for each tile in the tilemap,
		- create a tile
		- parent the tile
		- position the tile
		- put the tile in the table using a map: [vec3] = id
	* send the tile table to the new grid's controller script
	]]

	local new_grid_object = factory.create("#hex_grid_factory")
	local tiles = {}
	for_each_tile(map, function (x, y)
		local hex_position = vmath.vector3(x,y,0)
		local pixel_position = hexagon_geometry.hex_to_pixel(hex_position, size) or vmath.vector3()
		local new_tile_id = factory.create("#hex_tile_factory",pixel_position)
		msg.post(new_tile_id, "set_parent", { parent_id = new_grid_object, keep_world_transform = 1 })
		--TODO: scale the tile based on size
		tiles[hex_position] = new_tile_id
	end)
	msg.post(msg.url(nil,new_grid_object, "hex_grid_controller"), "set_tiles",{tiles = tiles})
end

function on_message(self, message_id, message, sender)
	if message_id == hash("build_grid") then
		build_grid(message.size or TILE_SIZE_DEFAULT, message.map)
	end
end